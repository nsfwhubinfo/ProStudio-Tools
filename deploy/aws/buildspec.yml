# AWS CodeBuild specification for ProStudio
# =========================================

version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      
      - echo Installing dependencies...
      - pip install --upgrade pip
      - pip install pytest pytest-cov black flake8 bandit safety
      
  build:
    commands:
      - echo Build started on `date`
      
      # Run tests
      - echo Running unit tests...
      - python -m pytest tests/ --cov=core --cov-report=xml
      
      # Code quality checks
      - echo Running code quality checks...
      - black --check core/
      - flake8 core/ --max-line-length=120
      
      # Security scan
      - echo Running security scan...
      - bandit -r core/ -f json -o bandit-report.json
      - safety check --json > safety-report.json || true
      
      # Build Docker image
      - echo Building Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
      
      # Run container tests
      - echo Running container tests...
      - docker run --rm $REPOSITORY_URI:latest python -m pytest tests/integration/
      
  post_build:
    commands:
      - echo Build completed on `date`
      
      # Push to ECR
      - echo Pushing Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      
      # Update task definition
      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      
      # Performance test (optional)
      - |
        if [ "$RUN_PERFORMANCE_TESTS" = "true" ]; then
          echo Running performance benchmarks...
          docker run --rm $REPOSITORY_URI:latest python -m pytest tests/performance/ -v
        fi

artifacts:
  files:
    - imagedefinitions.json
    - bandit-report.json
    - safety-report.json
  reports:
    pytest_reports:
      files:
        - coverage.xml
      file-format: COBERTURAXML

cache:
  paths:
    - '/root/.cache/pip/**/*'